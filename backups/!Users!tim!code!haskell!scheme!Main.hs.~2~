module Main where
import System.Environment
import Text.ParserCombinators.Parsec hiding (spaces)
import Monad
import Numeric (readOct, readDec, readHex, readInt, readFloat)

data LispVal = Atom String
             | List [LispVal]
             | DottedList [LispVal] LispVal
             | Number Integer
             | Float Double
             | String String
             | Bool Bool
             | Character Char
             deriving (Show)

symbol :: Parser Char
symbol = oneOf "$%&|*+-/:<=>?@^_~"

spaces :: Parser ()
spaces = skipMany1 space

parseList :: Parser LispVal
parseList = liftM List $ sepBy parseExpr spaces

parseDottedList :: Parser LispVal
parseDottedList = do
                head <- endBy parseExpr spaces
                tail <- char '.' >> spaces >> parseExpr
                return $ DottedList head tail

parseQuoted :: Parser LispVal
parseQuoted = do
            char '\''
            x <- parseExpr
            return $ List [Atom "quote", x]

parseString :: Parser LispVal
parseString = do char '"'
                 x <- many $ many1 (noneOf "\"") <|> escapedChars
                 char '"'
                 return $ String (concat x)

escapedChars :: Parser String
escapedChars = do char '\\' 
                  x <- oneOf "\\\"ntr" 
                  return $ case x of
                         '\\' -> [x]
                         '"'  -> [x]
                         't'  -> "\t"
                         'n'  -> "\n"
                         'r'  -> "\r" 

parseAtom :: Parser LispVal
parseAtom = do first <- letter <|> symbol
               rest <- many (letter <|> digit <|> symbol)
               let atom = first:rest
               return $ Atom atom
               -- return $ case atom of
               --               "#t" -> Bool True
               --               "#f" -> Bool False
               --               otherwise -> Atom atom

parseBool :: Parser LispVal
parseBool = do string "#"
               x <- oneOf "tf"
               return $ case x of 
                             't' -> Bool True
                             'f' -> Bool False 

parseCharacter :: Parser LispVal
parseCharacter = do try $ string "#\\"
                    value <- try (string "newline" <|> string "space")
                             <|> do { x<- anyChar; notFollowedBy alphaNum; return [x]}
                    return $ Character $ case value of
                           "space" -> ' '
                           "newline" -> '\n'
                           otherwise -> (value !! 0)

parseNumber :: Parser LispVal
parseNumber = do num <- parseDigital1 <|> parseDigital2 <|> parseHex <|> 
                        parseOct <|> parseBin 
                 return $ num

parseDigital1 :: Parser LispVal
parseDigital1 = do x <- many1 digit
                   (return . Number . read) x

parseDigital2 :: Parser LispVal
parseDigital2 = do try $ string "#d"
                   x <- many1 digit
                   (return . Number . read) x

parseFloat :: Parser LispVal
parseFloat = do try $ string "#d"
                x <- many1 digit
                try $ char '.'
                y <- many digit
                return $ Float (float (x ++ "." ++ y))

float x = fst $ readFloat x !! 0

parseHex :: Parser LispVal
parseHex = do try $ string "#o"
              x <- many1 hexDigit
              return $ Number (hex2dig x)

parseOct :: Parser LispVal
parseOct = do try $ string "#o"
              x <- many1 octDigit
              return $ Number (oct2dig x)

parseBin :: Parser LispVal
parseBin = do try $ string "#b"
              x <- many1 (oneOf "10")
              return $ Number (bin2dig x)

oct2dig x = fst $ readOct x !! 0
hex2dig x = fst $ readHex x !! 0
bin2dig = bin2dig' 0
bin2dig' digint "" = digint
bin2dig' digint (x:xs) = let old = 2 * digint + (if x == '0' then 0 else 1) in
                         bin2dig' old xs

parseExpr :: Parser LispVal
parseExpr = parseAtom
          <|> parseString
          <|> try parseFloat
          <|> try parseNumber
          <|> try parseBool
          <|> try parseCharacter
          <|> try parseQuoted
          <|> do char '('
                 x <- (try parseList) <|> parseDottedList
                 char ')'
                 return x

readExpr :: String -> String
readExpr input = case parse parseExpr "lisp" input of
    Left err -> "No match: " ++ show err
    Right val -> "Found value: " ++ show val

main :: IO ()
main = do args <- getArgs
          putStrLn( readExpr (args !! 0))






