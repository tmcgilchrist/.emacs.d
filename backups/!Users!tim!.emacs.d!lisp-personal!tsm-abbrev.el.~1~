;;; new macro declare-abbrevs -- similar to define-abbrev-table
(require 'cl)
(defvar my-abbrev-tables nil)
(defun my-abbrev-hook ()
  (let ((def (assoc (symbol-name last-abbrev) my-abbrev-tables)))
    (when def
      (execute-kbd-macro (cdr def)))
    t))
(put 'my-abbrev-hook 'no-self-insert t)
(defmacro declare-abbrevs (table abbrevs)
  (if (consp table)
      `(progn ,@(loop for tab in table
		      collect `(declare-abbrevs ,tab ,abbrevs)))
    `(progn
       ,@(loop for abbr in abbrevs
	       do (when (third abbr)
		    (push (cons (first abbr) (read-kbd-macro (third abbr)))
			  my-abbrev-tables))
	       collect `(define-abbrev ,table
			  ,(first abbr) ,(second abbr) ,(and (third abbr)
							     ''my-abbrev-hook))))))
(put 'declare-abbrevs 'lisp-indent-function 2)