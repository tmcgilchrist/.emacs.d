import Data.List
import Network 
import System.IO
import System.Exit
import Control.Monad.Reader
import Control.Exception
import Text.Printf
import Prelude hiding (catch)

server = "irc.freenode.org"
port = 6667
chan = "#tutbot-testing"
nick = "tutbot"

-- The 'Net' monad, a wrapper over IO, carrying the bot's immutable state.
type Net = ReaderT Bot IO
data Bot = Bot { socket :: Handle }

-- Set up actions to run on start and end, and run the main loop
main :: IO ()
main = bracket connect disconnect loop
     where
        disconnect = hClose . socket
        loop st    = catch (runReaderT run st) (const $ return ())

-- Connect to the server and return the initial bot state
connect :: IO Bot
connect = notify $ do
        h <- connectTo server (PortNumber (fromIntegral port))
        hSetBuffering h NoBuffering
        return (Bot h)
        where
                notify a = = bracket_
                (printf "COnnecting to %s .. " server >> hFlush stdout)
                (putStrLn "done.")
                a
