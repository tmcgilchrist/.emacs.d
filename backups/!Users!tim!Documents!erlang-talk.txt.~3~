__Introduction to Erlang__

__About Me__
Tim McGilchrist - Fulltime Java programming and part-time functional programmer.

Found FP-SYD when looking for interesting groups in the Sydney area.

Discovered FP and Haskell when taking a class at UNSW. 
I didn't do so well at that class but I did learn about Fuctional Programming so I think I came out ahead.

Found Erlang after reading a review of the Joe Armstrong book and taking the Distributed Systems course at UNSW which uses Erlang. So Erlang became my new language for 2008.

View of Erlang highlighting the interesting bits for a Java programmer.

__What is it?__
Functional programming language developed by Ericsson. 

Project goals: concurrency, scalability and availablity (all those Java/Enterprise weasel words).

Originally developed using Prolog by Joe Armstrong. Prolog?? 

Uses a virtual machine that runs a bytecode.
Provides JIT, Garbage Collection, Memory Management !!What else!!

The BEAM instruction set is register-based and has 130 instructions.

The garbage collector is a mark-and-sweep copying collector. 
The most interesting thing about the BEAM garbage collector is that the garbage collected heaps are per-process. 

Tail recursion optimisation.

__History__
!!Look at ERLANG Talk on SE-Radio!!

__Gentle Introduction__

Basic types.
Variables identified by an Uppercase letter followed by any alphanumeric character, can only be assigned to once. Which gives you immuntable state.

X = 12
X= 13
>> error

The assignment operator is really a pattern matching operation so you can have arbitary RHS of an equation.

1> {X,_} = {1,2}.
{1,2}
2> X.
1
3> Y = 12.
12
4> Y = 13.
** exception error: no match of right hand side value 13
5> Y = 3 * 4.
12
6> 

Erlang has a number of types familar from other languages.
It has Ints, Floats for typical numerical calculations, both have arbitary precision.

Atoms are used for non-numeric constants.
eg hello, point

Tuples are like c structs
 - the elements in a tuple aren't associated with a name so you have to remember what each tuple means.
 - the common practice is to have an atom as the identifier

1> X = {point, 0.0, 2.5}.
{point,0.0,2.5}
2> {10,2}.
{10,2}
3> {point, X, Y} = X.
** exception error: no match of right hand side value {point,0.0,2.5}
4> {point, H, K} = X.
{point,0.0,2.5}
5> H.
0.0
6> K.
2.5
7> 


Lists - similar to Haskell and just about any other FP language.
Declaration like [1,2,3,4]
No restriction on elements inside a list (weak typing?) [1,foo, "ro"]
Familar opterations like getting the head and tail of a list
7> L = [1,2,3,4].
[1,2,3,4]
8> [H|Tail] = L.
[1,2,3,4]
9> H.
1
10> Tail.
[2,3,4]

More operations availble in module "lists"
8> lists:reverse([1,2,1,3]). 
[3,1,2,1]

Strings - there are no strings in Erlang. Technically they aren't a separate type, they are simple a sequence of numbers that happen to represent printable characters. GIves you Unicode without any effort, makes things with processing text more difficult (Erlang has a unique solution to this problem, that I'll mention later

11> Str = "hello".
"hello"
12> [H1|Tail1] = Str.
"hello"
13> H1.
104
14> Tail1.
"ello"


Function declaration.
Modules.

Running an example.

Side-by-side comparison of Haskell fibonacci and Erlang version. 
They look remarkably similar, so shouldn't be too scary for Haskellers. 
Though it might mess up your syntax memory.

Concurrency, Threading and Message Passing. 
Network programming and concurrency are the reason for using Erlang.


__Interesting Highlights__
Functional Features that you are familar with from 
Immutable State - Assign once variable
Actor based concurrency- different approaches to concurrency, Erlang uses no shared state.

Message passing - first class feature that is highly optimised
Runs on a virtual machine, similar to the JVM or .NET (ewww)
Exception handle - simply restart the process. 

Hot code replacement. You can code your application such that you load the new version of your application and when it calls a particular function it magically switches to the newere version. Any existing processes will continue to run the old version until they hit this function. !!Code Example - Demo!!

This allows for highly available software that can be upgraded in production without any system downtime (assuming there were no bugs ;-)). This feature is most exciting for an existing Java sufferer/coder. I dream of being able to deploy my code in seconds rather than the years that IBMs WebSphere takes.

OTP - Open Telecom Platform: Think of it as J2EE but for Erlang and with less wailing and nashing of teeth. !!Provides-Examples!!

Remote spawning of processes and reattaching to Erlang VM.

__Lies and Benchmarks__
Scalability of Apache vs Yaws

YAWS - Yet Another Web Server is, as the name suggests another webserver but written in Erlang using the lightweight processes approach.

!!YAWS Architecture Picture!!

Calculating fibonnaci series

__Interesting Projects__
Wings3D - 3D flight simulator. Really doesn't belong in Erlangs target niche, lots of floating point and has a single thread.

CouchDB - Document oriented database. Features: MapReduce, Highly scalable, Replication, REST Architecture.

RabbitMQ - Message Broker. !!Needs more research!! Use instead of a traditional Java MQ.

__Downsides__
Interesting handling of strings, full Unicode handling, strings are really just lists, strings are somewhat bloated so often it's better to use the binary version. Binary parsing DSL example.

__Resources__
CEAN The Comprehensive Erlang Archive Network - Like CPAN is for Perl
http://cean.process-one.net/


__Contributions__
Joe Armstrong - Programming Erlang
Joe Armstrong Interview on Software Engineering Radio

RabbitMQ - http://www.rabbitmq.com/
CouchDB - http://couchdb.apache.org/
Wings3D - http://www.wings3d.com

http://erlangdotnet.net/2007/09/inside-beam-erlang-virtual-machine.html


__ Interview __

Started with modifying Prolog to add threads/processes.
"Concurrent programming without the pain" Joe Armstrong

Actor based concurrency. Share nothing.
Concurrency oriented programming.
No mutable state.

