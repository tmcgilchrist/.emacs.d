;; Tim's .emacs file, mostly OSX based.
;;

;; Options Menu Settings
;; =====================

; load variable config for xemacs (needs the customize package)
;(cond
;  ((string-match "XEmacs" emacs-version)
;    (load-file "~/.xemacs")
;    (setq-default custom-file "~/.xemacs")
;    (load-file "~/.xemacs-options")))

;;; Test of Emacs derivates
;;; -----------------------

(defvar running-xemacs (string-match "XEmacs\\|Lucid" emacs-version))

(if running-xemacs
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; Stuff For XEmacs
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; This is a really long way of saying 
  ;; "Load the .xemacs-options file"
  (cond
   ((and (string-match "XEmacs" emacs-version)
	 (boundp 'emacs-major-version)
	 (or (and
	      (= emacs-major-version 19)
	      (>= emacs-minor-version 14))
	     (= emacs-major-version 20))
	 (fboundp 'load-options-file))
    (load-options-file "~/.xemacs-options")))

  ;; If not exists create the XEmacs options file 
  (progn
    (if (and (not (file-readable-p "~/.xemacs-options"))
	     (fboundp 'save-options-menu-settings))
	(save-options-menu-settings))
      ;; Remember font and more settings
      (setq options-save-faces t)
   ))
      
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Stuff For Standard emacs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;; set text mode as default mode
(setq default-major-mode 'text-mode) 

;; always auto-fill in text mode.
(add-hook 'text-mode-hook 'turn-on-auto-fill)      

;;;;; Fear the great and powerfull auto-mode-list of nolandda
(setq auto-mode-alist
      (append '(("\\.h\\'" . c-mode)
                ("\\.c\\'" . c-mode)
                ("\\.hh\\'" . c++-mode) 
                ("\\.hx\\'" . c++-mode)
                ("\\.hpp\\'" . c++-mode)
                ("\\.cc\\'" . c++-mode) 
                ("\\.cpp\\'" . c++-mode)
                ("\\.[CH]\\'" . c++-mode)
		("\\.java\\'" . java-mode)
                (".*[mM]akefile.*" . makefile-mode)
		("\\.html\\'" . sgml-mode)
                ("\\.HTML\\'" . sgml-mode)
                ("\\.htm\\'" . sgml-mode)
                ("\\.HTM\\'" . sgml-mode)
                ("\.xemacs" . emacs-lisp-mode) 
                ("\.emacs"  . emacs-lisp-mode) 
                ("\\.el\\'" . emacs-lisp-mode) 
                ("\\.sh\\'" . sh-mode) 
                ("\.bash_profile"  . sh-mode) 
                ("\.bashrc" . sh-mode) 
                ("\.cshrc" . sh-mode) 
                ("\.tcshrc" . sh-mode) 
                ("\\.sql\\'" . sql-mode) 
                ("\\.txt\\'" . text-mode) 
                ("\\.text\\'" . text-mode) 
                ("\\.py\\'" . python-mode)
                ("\\.ps\\'" . postscript-mode)
		("\\.pl\\'" . prolog-mode )
                ("\\.[tT]e[xX]\\'" . tex-mode)
                ("\\.ltx\\'" . latex-mode)
                ("\\.bib\\'" . bibtex-mode)            
                ("\\.[sS]\\'" . asm-mode)
                ("\\.asm\\'" . asm-mode)
                ("\\.scm\\'" . scheme-mode)
                ("\\.awk\\'" . awk-mode)
                ("\\.f\\(or\\)?\\'" . fortran-mode)
                ("\\.f\\(?:or\\)?\\'" . fortran-mode)
                ("\\.[fF]90\\'" . f90-mode)
                ("\\.ad[abs]\\'" . ada-mode)
                ("\\.lisp\\'" . lisp-mode)
                ("\\.cl\\'" . lisp-mode)
                ("\\.cm\\'" . lisp-mode)
                ("\\.clm\\'" . lisp-mode)
                ("\\.p\\(as\\)?\\'" . pascal-mode)
                ("\\.p\\(?:as\\)?\\'" . pascal-mode)
                ("\\.lex\\'" . c-mode)
		("\\.yacc\\'" . c-mode)
		("\\.yy\\'" . c-mode)
		("\\.y\\'" . c-mode)
		("\\.jacl\\'" . tcl-mode)
		("\\.tcl\\'" . tcl-mode)
                ("\\.bas\\'" . basic-mode)
                ("\\.vbs\\'" . basic-mode)
                ("\\.m\\'" . matlab-mode)
                ("\\.[Jj][Pp][Ee]?[Gg]\\'" . image-mode)
                ("\\.[Pp][Nn][Gg]\\'" . image-mode)
                ("\\.[Gg][Ii][Ff]\\'" . image-mode)
                ("\\.[Tt][Ii][Ff][Ff]?\\'" . image-mode)
                ) auto-mode-alist))

;; We want to see the line/column number at the bottom of the page
(setq line-number-mode t)
(setq column-number-mode t)

;; Always end a file with a newline
(setq require-final-newline t)

;; make all "yes or no" prompts be "y or n" instead
(fset 'yes-or-no-p 'y-or-n-p)

;; Turn off things that annoy me
(setq scroll-step 1)             ; Scroll one line at a time damnit!
(setq visible-bell t)            ; Turn off the &*^%$ bell!
(setq inhibit-startup-message t) ; no splash screen

;; This enables the colors
;; Turn on font-lock in all modes that support it
(if (fboundp 'global-font-lock-mode)
    (global-font-lock-mode t))
(setq font-lock-make-faces t)
(setq font-lock-maximum-decoration t)

;; Fun with colors (don't you fell like the old BBS days again
;;setup display colors for font-lock
(set-face-background 'default "white") 
(set-face-foreground 'default "black") 

;; apparently xemacs 20.4 hates colors
;(cond ((not running-xemacs)
      
       ;(set-face-foreground font-lock-comment-face "red")
;       (set-face-foreground font-lock-string-face  "cornflower blue")
;       (set-face-foreground font-lock-keyword-face "blue1")
;       (set-face-foreground font-lock-function-name-face "blue1")
;       (set-face-foreground font-lock-variable-name-face "DarkGoldenrod1")
;       (set-face-foreground font-lock-type-face "dark green")
;       (set-face-foreground font-lock-builtin-face "purple2")
;       (set-face-foreground font-lock-constant-face "dark grey")
;       (set-face-foreground font-lock-reference-face  "dark grey")))


;;; Some handy keys
(global-set-key "\C-x\C-e" 'compile)
(global-set-key "\M-c" 'compile)
(global-set-key "\M-g" 'goto-line)
(global-set-key "\C-z" 'undo)
(global-set-key [delete] 'delete-char)
(global-set-key [home] 'beginning-of-buffer)
(global-set-key [end] 'end-of-buffer)
(global-set-key [F7] 'ispell-buffer)

;; xemacs 20.4 hates this too
;(if (not running-xemacs)
(cond ((not running-xemacs)
;;; Ctrl-Tab and Ctrl-Shift-Tab cycle through buffers
    (global-set-key [\C-tab] 'bs-cycle-next) ;goto next buffer
     (global-set-key [\C-\S-tab] 'bs-cycle-previous))) ;goto previous buffer

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; This will save your life some day
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq auto-save-default t)    ; Yes auto save good
(setq auto-save-interval 100) ; Number of input chars between auto-saves
(setq auto-save-timeout 300)  ; Number of seconds idle time before auto-save
 
;; make backup files in ~/.backups/ rather than scattered around all
;; over the filesystem. 

;; reload .emacs file (useful for editing .emacs itself :)
(global-set-key "\M-e" 'reload-dotemacs)
(defun reload-dotemacs () 
  "Reload .emacs" 
  (interactive)
  (load-file "~/.emacs")
  )

;; To put the backup~ files in ~/.backups
(setq backup-by-copying t)      ; don't clobber symlinks
(setq backup-directory-alist '(("." . "~/.backups"))) ; don't litter my fs tree
(setq delete-old-versions t)    ; clean up a little
(setq kept-new-versions 6)      ; keep 6 new
(setq kept-old-versions 2)      ; keep only 2 old
(setq version-control t)        ; use versioned backups

;---------------------------------------------------------------------------
; This section sets up some default values for when you are editing in C-mode
; 
; Modified: Wed Mar  7 18:40:54 EST 2007
;---------------------------------------------------------------------------

(defun my-c-setup ()
  (setq compilation-window-height 8)
  (setq default-tab-width 4)
  (setq c-default-style "bsd")
  (setq c-basic-offset 4)
  (setq c-label-indent 2)

  (setq compilation-finish-function
	(lambda (buf str)
	  (if (string-match "exited abnormally" str)
	      ;;there were errors
	      (message "compilation errors, press C-x ` to visit")
			
	    ;;no errors, make the compilation window go away in 0.5 seconds
	    (run-at-time 0.5 nil 'delete-windows-on buf)
	    (message "NO COMPILATION ERRORS!"))))
  )

(add-hook 'c-mode-common-hook 'my-c-setup)
(add-hook 'c-mode-hook 'my-c-setup)

;------------------------------------------------------------------
; This section programs a date function (useful for logging times 
; in job notes, etc). The date function is attached to <C-x><C-d>.
; Added Thu Apr 16 15:39:12 EST 1987 :-)
;------------------------------------------------------------------
(defun current-date-and-time ()
  "Insert the current date and time (as given by UNIX date) at dot."
  (interactive)
  (call-process "date" nil t nil))
(global-set-key "\C-x\C-d" 'current-date-and-time)

;---------------------------------------------------------------
; Get rid of the infernal windoze chars
; Added Mon Aug 26 04:44:09 EST 2002
;---------------------------------------------------------------
(defun turn-to-unix ()
  (interactive)
  (set-buffer-file-coding-system 'iso-8859-1-unix))
(global-set-key "\C-x\C-u" 'turn-to-unix)

;----------------------------------------------------------------
; Haskell mode customisation from http://haskell.org/haskell-mode/
; added Mon Feb 21 22:18:00 EST 2004
;----------------------------------------------------------------
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/haskell-mode-2.3")
(setq auto-mode-alist
      (append auto-mode-alist
	      '(("\\.[hg]s$"  . haskell-mode)
		("\\.hi$"	. haskell-mode)
		("\\.l[hg]s$"	. literate-haskell-mode))))
(autoload 'haskell-mode "haskell-mode"
  "Major mode for editing Haskell scripts." t)
(autoload 'literate-haskell-mode "haskell-mode"
  "Major mode for editing literate Haskell scripts." t)
(setq haskell-ghci-program-name "/opt/local/bin/ghci")
(setq haskell-ghci-program-args '("-fglasgow-exts"
				  "-fallow-undecidable-instances"))
(add-hook 'haskell-mode-hook 'turn-on-haskell-decl-scan)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
(add-hook 'haskell-mode-hook 'turn-on-haskell-ghci)

;----------------------------------------------------------------
; Prolog mode customisation from http://turing.ubishops.ca/home/\
;	bruda/emacs-prolog/
; Added Wed Mar 30 20:20:24 EST 2005
; Updated Sun Feb 25 12:34:02 EST 2007
;----------------------------------------------------------------
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/prolog-mode-1.14")
(autoload 'run-prolog "prolog" "Start a Prolog sub-process." t)
(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
(setq prolog-program-name "/opt/local/bin/swipl")
(setq prolog-mode-hook
      '(lambda ()
	 (define-key prolog-mode-map "\C-c\C-c" 'comment-region)
	 ))
(require `prolog)

;----------------------------------------------------------------
; SLIME customisation from
;	http://common-lisp.net/project/slime/doc/html/slime.html
; Added Sat Jan  7 15:53:19 EST 2006
;----------------------------------------------------------------
(setq inferior-lisp-program "/opt/local/bin/sbcl")
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/slime-2.0")
(require 'slime)
(slime-setup)

;----------------------------------------------------------------
; Erlang customisation 
;
; Added Mon Feb 19 12:04:56 EST 2007
;----------------------------------------------------------------
(setq load-path (cons  "/opt/local/lib/erlang/lib/tools-2.6.1/emacs"
					   load-path))
(setq erlang-root-dir "/opt/local/lib/erlang")
(setq exec-path (cons "/opt/local/lib/erlang/bin" exec-path))
(require 'erlang-start)

;----------------------------------------------------------------
; Subversion customisation
;
; Added Thu Oct  4 08:55:57 EST 2007
;----------------------------------------------------------------
;(setq exec-path (cons "/opt/local/bin" exec-path))
;(require 'psvn)


;----------------------------------------------------------------
; Ruby customisation 
;
; Based on http://www.rubygarden.org/Ruby/page/show/InstallingEmacsExtensions  
; and http://blog.modp.com/2007/09/ruby-mode-for-emacs.html 
; Added Wed Oct  3 11:11:46 EST 2007
;----------------------------------------------------------------
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/ruby")

 (autoload 'ruby-mode "ruby-mode"
     "Mode for editing ruby source files")
 (add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
 (add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))
 (autoload 'run-ruby "inf-ruby"
     "Run an inferior Ruby process")
 (autoload 'inf-ruby-keys "inf-ruby"
     "Set local key defs for inf-ruby in ruby-mode")
 (add-hook 'ruby-mode-hook
     '(lambda ()
         (inf-ruby-keys)))
 ;; If you have Emacs 19.2x or older, use rubydb2x                              
 (autoload 'rubydb "rubydb3x" "Ruby debugger" t)
 ;; uncomment the next line if you want syntax highlighting                     
 (add-hook 'ruby-mode-hook 'turn-on-font-lock)

;----------------------------------------------------------------
; cscope customisation for NSLU2/L4 work
;
; Added Sun Jan 27 12:12:40 EST 2008
;----------------------------------------------------------------
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
(require `cscope)

;----------------------------------------------------------------
; python customisation
; Added Tue Jul 22 07:33:54 EST 2008
;----------------------------------------------------------------
(defun my-python-compile()
  "Use compile to run python programs"
  (interactive)
  (compile (concat "/opt/local/bin/python " (buffer-name))))

(setq compilation-scroll-output t)
(setq python-command "/opt/local/bin/python")
(setq python-mode-hook
      '(lambda () 
		 (local-set-key "\C-c\C-c" 'my-python-compile)
		 )
	  )

;----------------------------------------------------------------
; ECB customisation
; Added Fri  5 Dec 2008 09:35:08 EST
;----------------------------------------------------------------
(load-file "/Users/tim/.emacs.d/lisp/cedet-1.0pre4/common/cedet.el")
(add-to-list 'load-path "/Users/tim/.emacs.d/lisp/ecb-2.32")
(require 'ecb)
