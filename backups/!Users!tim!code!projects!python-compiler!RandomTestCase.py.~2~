#!/usr/bin/env python
import random
import unittest
import test as Lexer

class TestFunctions(unittest.TestCase):

	def setUp(self):
		self.seq = range(10)

# 	def testshuffle(self):
# 		# make sure the shuffled sequence does not lose any elements
# 		random.shuffle(self.seq)
# 		self.seq.sort()
# 		self.assertEqual(self.seq, range(10))

# 	def testchoice(self):
# 		element = random.choice(self.seq)
# 		self.assert_(element in self.seq)

# 	def testsample(self):
# 		self.assertRaises(ValueError, random.sample, self.seq, 20)
# 		for element in random.sample(self.seq, 5):
# 			self.assert_(element in self.seq)

	def testint(self):
		m = Lexer.Lexer()
		m.build()
		m.setup("12 1 0 1000")
		s = m.next()
		while s:
			self.assertEqual(s.type, 'INTLITERAL')
			s = m.next()

	def testboolean(self):
	    """
	    Tests parsing of Booleans
	    """
	    m = Lexer.Lexer()
	    m.build()
	    m.setup("true false")
	    s = m.next()
	    while s:
                self.assertEqual(s.type, 'BOOLEANLITERAL')
		s = m.next()
	
	def testfloat(self):
	    """
	    Tests parsing of float literals
            Arguments:
            - `self`:
            """
	    m = Lexer.Lexer()
	    m.build()
	    m.setup("1.0 12.00 0.0 1.")
	    s = m.next()
	    while s:
		print s.value
                self.assertEquals(s.type, 'FLOATLITERAL')
		s = m.next()
	

if __name__ == '__main__':
	#unittest.main()
	suite = unittest.TestLoader().loadTestsFromTestCase(TestFunctions)
	unittest.TextTestRunner(verbosity=2).run(suite)
