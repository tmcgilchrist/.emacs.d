module Main where
import System.Environment
import Text.ParserCombinators.Parsec hiding (spaces)
import Monad

data LispVal = Atom String
             | List [LispVal]
             | DottedList [LispVal] LispVal
             | Number Integer
             | String String
             | Bool Bool

symbol :: Parser Char
symbol = oneOf "#$%&|*+-/:<=>?@^_~"

spaces :: Parser ()
spaces = skipMany1 space

parseString :: Parser LispVal
parseString = do char '"'
                 x <- many (noneOf "\"")
                 char '"'
                 return $ String x

-- either a non-quote character or 
-- a backslash followed by a quote mark
foo :: CharParser st Char
foo = noneOf "\""
    <|> oneOf "\\\""

parseAtom :: Parser LispVal
parseAtom = do first <- letter <|> symbol
               rest <- many (letter <|> digit <|> symbol)
               let atom = first:rest
               return $ case atom of
                             "#t" -> Bool True
                             "#f" -> Bool False
                             otherwise -> Atom atom

-- Original version
-- parseNumber :: Parser LispVal
-- parseNumber = liftM (Number . read) $ many1 digit

-- using do notation
-- parseNumber :: Parser LispVal
-- parseNumber = do x <- many1 digit
--                  return $ Number (read(x) :: Integer)

-- using explicit sequencing '>>=' or '>>'
parseNumber :: Parser LispVal
parseNumber = many1 digit >>=
              (\x -> return $ Number (read(x) :: Integer))

parseExpr :: Parser LispVal
parseExpr = parseAtom
          <|> parseString
          <|> parseNumber

readExpr :: String -> String
readExpr input = case parse parseExpr "lisp" input of
    Left err -> "No match: " ++ show err
    Right val -> "Found value"

main :: IO ()
main = do args <- getArgs
          putStrLn( readExpr (args !! 0))
