#!/usr/bin/env python
import ply.lex as lex
import sys

class Lexer:
    # List of token names.
    reserved = {
        'boolean':'BOOLEAN', 
        'break':'BREAK', 
        'continue':'CONTINUE', 
        'else':'ELSE', 
        'float':'FLOAT', 
        'for':'FOR',
        'if':'IF',
        'int':'INT',
        'return':'RETURN',
        'void':'VOID',
        'while':'WHILE'
        }

    tokens = [
        # literals
        'FLOATLITERAL', 
        'INTLITERAL',
        'BOOLEANLITERAL', 'STRINGLITERAL',

        # operators
        'PLUS', 'MINUS', 'MULT', 'DIV', 'NOT',
        'NOTEQ', 'EQ', 'EQEQ', 'LT', 'LTEQ', 'GT',
        'GTEQ', 'ANDAND', 'OROR',

        # separators
        'LCURLY', 'RCURLY', 'LPAREN', 'RPAREN',
        'LBRACKET', 'RBRACKET', 
        'SEMICOLON', 'COMMA',
        
        # identifiers
        'ID',
        ] + reserved.values()

    # Regular expression rules for simple tokens
    t_PLUS = r'\+'
    t_MINUS = r'-'
    t_MULT = r'\*'
    t_DIV = r'/'
    t_NOT = r'!'
    t_NOTEQ = r'!='
    t_EQ = r'='
    t_EQEQ = r'=='
    t_LT = r'<'
    t_LTEQ = r'<='
    t_GT = r'>'
    t_GTEQ = r'>='
    t_ANDAND = r'&&'
    t_OROR = r'\|\|'

    t_LCURLY = r'\{'
    t_RCURLY = r'\}'
    t_LPAREN = r'\('
    t_RPAREN = r'\)'
    t_LBRACKET = r'\['
    t_RBRACKET = r'\]'
    t_SEMICOLON = r';'
    t_COMMA = r','

    # A string containing ignored characters (spaces and tabs)
    t_ignore  = ' \t'

    # A regular expression rule with some action code
    # Note: ordering of operations determines the matching order
    def t_ID(self, t):
        r'[a-zA-Z][a-zA-Z0-9]*'
        t.type = reserved.get(t.value,'ID')    # Check for reserved words
        return t

    def t_FLOATLITERAL(self, t):
        r'[\+-]?(\d+\.\d+)'
        try:
            t.value = float(t.value)
        except ValueError:
            print "Float value too large", t.value
            t.value = 0
        return t

    def t_INTLITERAL(self, t):
        r'[\+-]?\d+'
        try:
            t.value = int(t.value)
        except ValueError:
            print "Integer value too large", t.value
            t.value = 0
        return t

    def t_BOOLEANLITERAL(self, t):
        r'[true|false]'
        try:
            t.value = boolean(t.value)
        except ValueError:
            print "Boolean value incorrect", t.value
            t.value = false
        return t

    def t_STRINGLITERAL(self, t):
        r'\"[a-zA-Z]\"'

    # Define a rule so we can track line numbers
    def t_newline(self, t):
        r'\n+'
        t.lexer.lineno += len(t.value)

    # Error handling rule
    def t_error(self, t):
        print "Illegal character '%s'" % t.value[0]
        t.lexer.skip(1)

    # Build the lexer
    def build(self, **kwargs):
        self.lexer = lex.lex(object=self, **kwargs)
	
    def next(self):
        return self.lexer.token()

    def setup(self, data):
        self.lexer.input(data)

