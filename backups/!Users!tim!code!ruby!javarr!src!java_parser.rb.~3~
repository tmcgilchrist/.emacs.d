#!/usr/bin/env ruby -wKU

require "strscan"
require "token"

class JavaParser

  def parse(input)
    @input = StringScanner.new(input)
    parse_value
  ensure
    @input.eos? or error("Unexpected data")
  end

  private

  def parse_value
    trim_space
    parse_singleline_comment or
    parse_multiline_comment or
    parse_intliteral or
    parse_boolean_literal or
    parse_string_literal or
    parse_keyword or
    error("Illegal Java value")
  ensure
    trim_space
  end

  def parse_keyword
    str = @input.scan(/boolean|break|continue|else|for|float|if|int|return|void|while/)
    if str == TokenType::BOOLEAN.to_s
      Token.new(TokenType::BOOLEAN, str, 0)
    elsif str == TokenType::BREAK.to_s
      Token.new(TokenType::BREAK, str, 0)
    elsif str == TokenType::CONTINUE.to_s
      Token.new(TokenType::CONTINUE, str, 0)
    elsif str == TokenType::ELSE.to_s
      Token.new(TokenType::ELSE, str, 0)
    elsif str == TokenType::FOR.to_s
      Token.new(TokenType::FOR, str, 0)
    elsif str == TokenType::FLOAT.to_s
      Token.new(TokenType::FLOAT, str, 0)
    elsif str == TokenType::IF.to_s
      Token.new(TokenType::IF, str, 0)
    elsif str == TokenType::INT.to_s
      Token.new(TokenType::INT, str, 0)
    elsif str == TokenType::RETURN.to_s
      Token.new(TokenType::RETURN, str, 0)
    elsif str == TokenType::VOID.to_s
      Token.new(TokenType::VOID, str, 0)
    elsif str == TokenType::WHILE.to_s
      Token.new(TokenType::WHILE, str, 0)
    end
  end

  def parse_string_literal
    if str = @input.scan(/\"\w\w*\"/)
      Token.new(TokenType::STRINGLITERAL, str, 0)
    end
  end

  def parse_boolean_literal
    if str = @input.scan(/true|false/)
      Token.new(TokenType::BOOLEANLITERAL, str, 0)
    end
  end

  def parse_intliteral
    if str = @input.scan(/\d+/)
      Token.new(TokenType::INTLITERAL, str, 0)
    end
  end

  def parse_singleline_comment
    if @input.scan(/\/\//)
      #grab all 
      comment = @input.scan(/[\w\s]*$/)
      Token.new(TokenType::COMMENT, "//"+comment, 0)
    else
      false
    end
  end

  def parse_multiline_comment
    str = @input.scan(/\/\*/)
    if str
        if s = @input.scan_until(/\*\//)
          Token.new(TokenType::COMMENT, str+s, 0)
        else 
          error("Unclosed comment")
        end
    else
      false
    end
  end

  def trim_space
    @input.scan(/\s+/)
  end
  
  def error(message)
    if @input.eos?
      raise "Unexpected end of input."
    else
      raise "#{message}:  #{@input.peek(7)}"
    end
  end
end
