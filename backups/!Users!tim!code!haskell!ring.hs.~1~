import Control.Monad
import Control.Concurrent
import System.Environment
import System.CPUTime

fork_ring_elem prev_mvar = do
               next_mvar <- newEmptyMVar
               forkIO (ring_elem prev_mvar next_mvar)
               return next_mvar

ring_elem :: MVar Int -> MVar Int -> IO ()
ring_elem prev_mv next_mv = run
          where run = do
                token <- takeMVar prev_mv
                putMVar next_mv (token -1)
                when ( token > 0) run

first_ring_elem :: MVar Int -> MVar Int -> IO ()
first_ring_elem prev_mv next_mv = run
           where run = do
                 token <- takeMVar prev_mv
                 putMVar next_mv (token -1)
                 putStrLn "."
                 when (token > 0) run