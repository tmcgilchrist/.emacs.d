;; See http://www.emacswiki.org/emacs-en/AbbrevMode#toc7

;;; new macro declare-abbrevs -- similar to define-abbrev-table
(require 'cl)
(defvar my-abbrev-tables nil)
(defun my-abbrev-hook ()
  (let ((def (assoc (symbol-name last-abbrev) my-abbrev-tables)))
    (when def
      (execute-kbd-macro (cdr def)))
    t))
(put 'my-abbrev-hook 'no-self-insert t)
(defmacro declare-abbrevs (table abbrevs)
  (if (consp table)
      `(progn ,@(loop for tab in table
		      collect `(declare-abbrevs ,tab ,abbrevs)))
    `(progn
       ,@(loop for abbr in abbrevs
	       do (when (third abbr)
		    (push (cons (first abbr) (read-kbd-macro (third abbr)))
			  my-abbrev-tables))
	       collect `(define-abbrev ,table
			  ,(first abbr) ,(second abbr) ,(and (third abbr)
							     ''my-abbrev-hook))))))
(put 'declare-abbrevs 'lisp-indent-function 2)

;;; sample abbrev definitions
(eval-after-load "c-mode"
  '(declare-abbrevs (c-mode-abbrev-table c++-mode-abbrev-table)
		    (("#s"    "#include <>" "C-b")
		     ("#i"    "#include \"\"" "C-b")
		     ("#ifn"  "#ifndef")
;		     ("#e"    "#endif /* */" "C-3 C-b")
		     ("#ifd"  "#ifdef")
		     ("imain" "int\nmain (int ac, char **av[])\n{\n\n}" "C-p TAB")
		     ("if"    "if () {\n}\n" "C-M-b C-M-q C-- C-M-d")
		     ("else"  "else {\n}\n"  "C-M-b C-M-q C-M-d RET")
		     ("while" "while () {\n}\n" "C-M-b C-M-q C-- C-M-d")
		     ("for"   "for (;;) {\n}\n" "C-M-b C-M-q C-M-b C-M-d")
		     ("pr"    "printf (\"\")" "C-2 C-b"))))

(dolist (hook '(c-mode
		text-mode-hook))
  (add-hook hook (lambda () (abbrev-mode 1))))

(quietly-read-abbrev-file)

(provide 'tsm-abbrev)
